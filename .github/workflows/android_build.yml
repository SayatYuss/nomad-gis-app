name: Build Flutter Android (Release APK for Test)

on:
  push:
    branches:
      - main # Или ваша основная ветка

jobs:
  build-android:
    runs-on: ubuntu-latest

    steps:
      # 1. Стандартная настройка
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
      - name: Get Flutter dependencies
        run: flutter pub get

      # 2. Генерируем ВРЕМЕННЫЙ Keystore
      # Он создается в корне проекта с именем 'test-keystore.jks'
      - name: Generate Temporary Keystore
        run: |
          keytool -genkey -v -keystore test-keystore.jks \
            -storepass testpass -keypass testpass \
            -alias testkey \
            -keyalg RSA -keysize 2048 -validity 10000 \
            -dname "CN=Test, OU=Test, O=Test, L=Test, ST=Test, C=US"

      # 3. НОВЫЙ ШАГ: Создаем key.properties
      # Этот файл сообщает Gradle, где найти ключ и какие пароли использовать
      - name: Create key.properties
        run: |
          echo "storePassword=testpass" > android/key.properties
          echo "keyPassword=testpass" >> android/key.properties
          echo "keyAlias=testkey" >> android/key.properties
          # Указываем путь к keystore. 'build.gradle' находится в 'android/app',
          # поэтому путь к 'test-keystore.jks' в корне - это '../../test-keystore.jks'
          echo "storeFile=../../test-keystore.jks" >> android/key.properties

      # 4. ИСПРАВЛЕННЫЙ ШАГ: Собираем Release APK
      # 'flutter build' автоматически найдет 'android/key.properties'
      - name: Build Flutter Release APK
        run: flutter build apk --release

      # 5. Загружаем артефакт
      - name: Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-apk-test
          path: build/app/outputs/flutter-apk/app-release.apk